Below is from https://www.youtube.com/watch?v=KibbYf9avko&t=43s tutorial
Approximately 2.32 in so far 1st march 23
Need to upload this to 
github.com/moriss/php_wp/0.2Custom_Theme_WP

Contents:
##############
Local,  Adding a new post, Adding a new pluggin, Change the title and tag line, ADD YOUR CUSTOM THEME, 
Create a Folder,  Create a css file,  Create an index.php file,  Create a thumbnail,  Add header and footer files,  Importing header and footer files,  Address of new site:,  Link our css and javascript files to our theme ,   Link google fonts and font awsome to our webiste:, add_action to functions.php file, Header and footer wordpress hooks,   
Adding a post index to a page  ,  

Adding theme support  ,  
Custom Post Type  ,  

Adding theme support , featured image , title tag feature , html5 theme support , BACK TO CUSTOM POST TYPE , Wordpress Templates ,  Adding a list of posts to your index.php page  ,  Adding a single post page  , Adding a front page ,  front-page.php  ,  Bring in you css, html and images , Updating header.php and footer.php files ,  Header and footer hooks ,   Importing header and footer files to front-page.php  ,  Menu links & other links  ,  Display post on front page , 
##############



Local :
Open Local
Select Admin
Your site url: http://<site name>.local/  (You need to 'start' the site in local first)
Your Admin url: http://<site name>.local/wp-admin/
Enter Username and Password (admin, admin for gtcoding practice site)

On the Admin page, hover over site name (top right) and select View Site

To view all current themes, click on 
Appearance>Themes

Here, you can select and 'Activate' different 'Themes' for your site

Our next goal is to create our own new theme.




Adding a new post.
Select 'Posts' in Admin>Add New
Go ahead and create a new post.
By default, when you select 'Publish', it will show on the home page. 



Adding a new Plugin
You don't need to do this, it's just an example of how to do it.
click on Plugins>add new
('Contact form 7' is the plugin installed in the tuturial so go ahead and install it).
Hovering over 'Contact' (Left column of Admin Page) then selecting 'Contact Forms', will take you to this newly installed Contact form 7 plugin. 




Change websites Title and Tag line's
To change the website's 'Title' and 'Tag line':
Open settings>general to then edit these and other settings.




ADD YOUR CUSTOM THEME
It's now time to add your own custom theme: (The GT Coding  site you created in this tutorial)
Go to Local then choose the site title (left column), right click>Go to site folder.
You can also click on the "Go to site folder" link below the main title of your site on the same page.
Incidentally: Once the folder opens, the file path to your theme files are: 
home/local sites/gtcoding>app>public>wp-content>themes>GTCoding

Incidentally, the complete filepath to your site files in this instance is home>local sites>gtcoding>app>public>wp-content>themes>. 
So each site you create requires its own individual wordpress environment including the default themes provided. 




Add your files to your theme
Here you will be adding style.css, index.php, header.php footer.php and a thumbnail
Create a folder in the Themes folder and name it GTCoding
(You can see the new theme in WP Admin>Appearance>Themes  It will currently be visible under 'Broken Themes')

NB: The code for the files below are in github>php_wp>boilerplate

Create a css file:
Create a new file called style.css (I did this from the terminal window)
Type the following in the css file (within comments). 
/**
Theme: GTCoding
Author: Maurizio Marrocco
Author URI:
Description:The official theme for GTCoding
Version: 1
**/
The above details will be displayed when you click on 'Appearance>Themes>Theme Details'.

Create an index.php file:
Create a new file called index.php (I did this from the terminal window)
(Write some html in the index.php file and activate it in 'Appearance>Themes' to test it works)

Create a thumbnail:
Thumbnail (The image that is displayed on your theme in the Admin area).
Save a thumbnail image of your choice, Name your image screenshot.png (Must be named in this way) and place it in your theme folder that contains your style.css and index.php files.
This image will now appear in your theme thumbnail

Add header and footer files:
Create a file called header.php and footer.php inside your GTCoding theme folder. (Examples of these are in github>php_wp>boilerplate.
Ad some html to both these files for later testing.





Importing header and footer files
Importing the header and footer files into our index.php file
Add this script to the index.php
####################
<?php get_header();?>
<h1>Hi from index.php</h1>
<?php get_footer();?>
#####################



2.12 in
https://www.youtube.com/watch?v=KibbYf9avko&t=43s 




Address of new site: 
Site ://<site name>.local/
Admin: http://<site name>.local/wp-admin/



Link our css and javascript files to our theme
This is achieved through creating a file called functions.php. Then use of a wordpress hook called wp_enqueue_script or wp_enqueue_style within this file.
Firstly create the file called functions.php  (This is a very usefull file we can do interesting things with in addition to adding our css and js files to our theme, such as adding a new categories to our posts and add new features to our theme and filters etc.)

See boilerplate for explanations to the required code below.
wp_enqueue_style('style', get_stylesheet_uri(), NULL,  microtime(), 'all');
wp_enqueue_script("main", get_theme_file_uri('js/main.js'),  NULL,  microtime(),  true);



stopped here 2.16 in



Link google fonts and font awsome to our webiste
We now need to link google fonts and font awsome to our webiste.
2.20 in
Before continuing at 2.20, refer to the 3.5_Adding_font_awsome file for more information in integrating font awesome into your wp site.

	//Below is for google fonts
	wp_enqueue_style('google_fonts', '//fonts.googleapis.com/css2?	family=Roboto+Condensed:ital,wght@1,300&family=Roboto+Slab:wght@300&family=Roboto:wght@300&display=swap"');
	
	//Below is for font-awesome
	wp_enqueue_style('font_awsome' , '//netdna.bootstrapcdn.com/font-awesome/3.2.1/css/font-awesome.css"');





add_action to functions.php file:
The functions.php file requires the following code to 'action' its function named 'gt_setup'
//Below refers to the function above named 'gt_setup'
//Parameter 1 = when the function should be executed
//parameter 2 = The name of the function
add_action('wp_enqueue_scripts', 'gt_setup');




Header and footer wordpress hooks:
We now need to add code to the header and footer files.

<?php wp_head();  ?> //A wordpress hook that needs to go within he header tags of the header file
<?php wp_footer();  ?> //A wordpress hook that needs to go before the body closing tag of the footer file





Adding theme support to posts
This adds functionality to the default posts to include: post thumbnails, title tag, and html5 ,
the post thumbnails functionality adds and option in admin to upload a desried image as your post's thumbnail.
It goes into functions.php
function gr_init() {
					add_theme_support('post-thumbnails');
					add_theme_support('title-tag');
					add_theme_support('html5',  array('comment-list' , 'comment-form' , 'search-form')); 
						}
add_action('after_setup_theme', 'gr_init');







Custom Post Type 
Here you are creating your own custome post type. 'post' is the default already available in the wp admin area. This custom post type will be added somewhere below it (on the admin page left menu).
This code is also available in custom_post_type.c
//register_post_type creates a new menu item in admin and allows you to create multiple projects as required. 
	//slug is the part of your URL that you can edit when writing or editing a post
	//Lables (Names) for each following item.
	//name = Name of the item on the admin menu
	//menu icon : add an icon for our post type (found at developer.wordpress.org  put dashicons into the searchbar to search through the different icons.
	//'public' Make this custom post type public. This can be kept private ie if it is only for admin.
	//'has_archive' Allows you to filter by date, author, categories etc
	// 'supports' What should be supported by this custom post type. (Items it will enable)
function gr_custom_post_type(){
	register_post_type('project', 
			    array('rewrite' => array('slug' => 'projects'),
			   'labels' => array('name' => 'Projects' , 'singular_name' => 'Project' , 
			   'add_new_item' => 'Add New Project' ,
			   'edit_item' => 'Edit Project'
			          	     ) ,
			   'menu-icon' => 'dashicons-clipboard' ,
			   'public' => true, 'has_archive' => true, 
			   'supports' => array('title' , 'thumbnail' , 'editor' , 'excerpt' , 'comments')
			  )			  
			   );
			      }//function end
add_action('init' , 'gr_custom_post_type'); //final step is to add an action to run this function
?>



2.24 in




STOPPED HERE	
	




Wordpress Templates ,
There are pre-determined templates that can serve up your content depending on how you want your layouts to look for certain pages. 

Wordpress will search for specifically named files within the files you create. If you don't have these SN files then wordpress will simply serve up your content with the default index.php

singular.php is the next template up from the default index.php. This will 'catch' a single page you create: (pages > add new) and also a single post (post > add new) [both from the admin dashboard left menu]

The next step-up is a)single.php for posts and b)page.php for pages. 
This is useful if you want to differentiate between the look of a single post and a single page.

The next step-up could be the use of a 'slug' (after the last forward slash in the url).
In the case of a page, the 'About' can be specifically identified and given its own template by using a slug. [In the case of the 'About' page, the slug is the 'about' string at the end of the url in your 'grange' website].

So to find the slug, go to the page in your admin and hover > view > to reveal the page and its slug (as I said previously) at the end of the url.

Blue laptop's desktop has a wordpress hierarchy image that you can use as a guide.

Other References
https://www.usablewp.com/learn-wordpress/building-the-blog/building-a-single-post-page/
Quote from: easywp.com/blog/wordpress-template-hierarchy-explained
Intro: The hierarchy is a system to determine which template file is required to display a selected web page on your site. The files served up are based on the type of page to be displayed. In wordpress, web pages can be displayed as a 'page', 'post', 'catergory page', 'search page'. 
A web page will also pull up several different template files when it loads. EG: if a web page needs to have a sidebar, then the sidebar.php template file will load. These 'Template Partials' are 'header', 'footer', 'sidebar'.

So if you now add a page via the wp admin, it should be served up by page.php (if you created a file with this name). Test this now!







Adding a list of posts to your index.php page  

This uses a while loop. The condition is that 'while posts exist...'
This is a page (index.php) that shows a list of posts available to click through to. IE, A list of posts you can choose from.

The items involved here are:
have posts, the post, the title, the excerpt and permalink. 

The code for this can be found in git/php_wp/post_list





Adding featured images and other functionality to your default posts:
This code is set globally within your functions.php file
function gr_init() {
					add_theme_support('post-thumbnails');
					add_theme_support('title-tag');
					add_theme_support('html5',  array('comment-list' , 'comment-form' , 'search-form')); 
						}
add_action('after_setup_theme', 'gr_init'); 
So, above is globally set. This means that future custom post types that your create will allow uploadable images, although you need to make sure you add this support in your custome code. (see below)

stopped here

Customised arguments
You need to add code in functions.php if you want to display a different list of posts and/or set a specific number of posts per page and change the length of the post's exerpt etc.

Adding 'featured-image/post thumbnail functionality to your posts. Ie: the ability to upload and image for your post.

This requires 2 steps in cases where you create/register your own custom post type. If you are not doing this and instead just using the default 'posts', you need only do step 1;

The first step is to set this functionality globably.
Below is for the functions.php file.

add_theme_support('post-thumbnails');
This sets the functionality globally and not only needs to be in place for the default 'posts' but is also required for setting up your own custom post (below).


And now you need to add it to your registered post type.
'supports' => array('thumbnail' , 'editor' , .... )
You input this into your register post type's parameters.

So the first step is to 



In your case, you created a custom post type named 'projects'. The code for how to list these are also in the post_list file. These require variables with arrays. 
The main items here are $args (a variable with and array), a second variable that takes the first variable as a WP_Query argument, a while loop, with have posts, post-of-choice (in my case, 'the post' or 'project') and posts per page. 

Finally, we have permalink, the title and the excerpt






Adding a single post page
If you click on any blog post from the blog post's index page, WordPress will take you to a page where you can read the entire blog post.
This page is served up by either single.php, singular.php or index.php files.  The default is the latter, then it moves to singular.php if no single.php file exists. Finally, if you have created a single.php file, then this is the file that serves it up. 

The code to display the page requires a loop.

Items here are: have posts, the post, the title, the author, get the post thumbnail, the content and the comment form. 

Please bear in mind you need to upload a featured image via admin for the post thumb nail to display. Just click on the post and upload a featured image. Remember to 'Update' your post so the FI is properly added. 

The code for this single post page is in git/php_wp/single_post.c






Adding a front page
site front page is very high up in the hierarchy so by creating a front-page.php, the site ,by default, will open in this page. Similar to the index.html in a static site.

So now we are 'transferring' the static gtcoding site we created earlier on in the video course to this wordpress website we are creating.

The static site is located at: blue laptop > desktop > projects > wordpress > my wordpress site
The wordpress website files are located at: home > local sites > grange > app > public > content > theme > grange

So firstly we need to add a new page within admin, calling in 'Home'. Whilst you're at it, create another page called 'blog'. Just delete any sample pages you previously created (just to keep things neat and tidy)
Now (from the admin dashboard) go to setting > reading. Change 'Your home page displays' drop down options to 'static page' and select 'Home' for the 'Home page' drop down option. Also select 'blog' for the 'post page' drop down option.

front-page.php
Create a file in your website route (where you also have index.php, header, footer etc) and name it front-page.php. The Wordpress site hierarchy will default to this page when someone visits your site. Test that it works.






Bring in you css, html and images
Paste all your css code from your static version of the site into the wp route folder's css file.
Paste all your index.html code over to the newly created front-page.php
Copy all your images over to a folder named img. (You may need to create this folder if not already done so)




Updating header.php and footer.php files
You are now beginning to move the relevant code over to the header and footer files you already created.
So, move all the header code from the recently pasted code in front-pag.php, to the header.php file. In my case, this is all the code above the 'banner' tag.
Do the same with the footer code by moving it from front-page.php to the footer.php file.




Header and footer hooks
Add this code to the closing body tag in footer.php 
<?php wp_footer(); ?> 
This identifies the code as footer code.

The header does something slightly differently.
This code: <?php wp_head(); ?> to be placed in header.php, replaces all the 'link' tags [originaly in the index.html static site], related to css, font awsome, google fonts and js (which can now be grabbed from your functions.php file).
So my understanding is that wp_head has two jobs. It identifies itself as header.php and also calls the link code from the functions.php file.





Importing header and footer files to front-page.php
Refer to your pencilled code map for a better visual. Below is the code

Add this to the top and bottom (respectively) to your front-page.php  file
<?php get_header(); ?>
<?php get_footer(); ?>




Menu links & other links
                <a class="active" href="<?php echo site_url('') ;?>">Home</a>
                <a href="<?php echo site_url('/blog') ;?>">Blog</a>
                <a href="<?php echo site_url('/projects') ;?>">Projects</a>
                <a href="<?php echo site_url('/about') ;?>">About</a>
		

           
Display post on front page
In your example, it sits within the 'section' ID
Items for the image are: the_permalink, get_the_post_thumbnail_url
Items for description are: the_permalink, the_title, trim_words(get_the_excerpt)



