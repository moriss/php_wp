Below is from https://www.youtube.com/watch?v=KibbYf9avko&t=43s tutorial
Approximately 2.32 in so far 1st march 23
Need to upload this to 
github.com/moriss/php_wp/0.2Custom_Theme_WP

Contents:
##############
Local,
Adding a new post
Adding a new pluggin
Change websites Title and Tag line's
ADD YOUR CUSTOM THEME
Add your files to your theme
Importing header and footer files 
Address of new site 
Link our css and javascript files to our theme 
Link google fonts and font awsome to our webiste 
Hooks for Header and footer files
Adding a list of posts to your index.php page
Adding theme support to posts
Custom Post Type
Wordpress Template Hierarchy
Adding a single post page

Adding a front page  
front-page.php 
Bring in you css, html and images (From a static  site)
Updating header.php and footer.php files
Header and footer hooks
Importing header and footer files to front-page.php 
Menu links to replace static menu links
Image Links to replace static image links
Display post list on front page 
##############



Local :
Open Local
Select Admin
Your site url: http://<site name>.local/  (You need to 'start' the site in local first)
Your Admin url: http://<site name>.local/wp-admin/
Enter Username and Password (admin, admin for gtcoding practice site)

On the Admin page, hover over site name (top right) and select View Site

To view all current themes, click on 
Appearance>Themes

Here, you can select and 'Activate' different 'Themes' for your site

Our next goal is to create our own new theme.




Add a new post.
Select 'Posts' in Admin>Add New
Go ahead and create a new post.
By default, when you select 'Publish', it will show on the home page. 



Adding a new Plugin
You don't need to do this, it's just an example of how to do it.
click on Plugins>add new
('Contact form 7' is the plugin installed in the tuturial so go ahead and install it).
Hovering over 'Contact' (Left column of Admin Page) then selecting 'Contact Forms', will take you to this newly installed Contact form 7 plugin. 




Change websites Title and Tag line's
To change the website's 'Title' and 'Tag line':
Open settings>general to then edit these and other settings.




ADD YOUR CUSTOM THEME
It's now time to add your own custom theme: (The GT Coding  site you created in this tutorial)
Go to Local then choose the site title (left column), right click>Go to site folder.
You can also click on the "Go to site folder" link below the main title of your site on the same page.
Incidentally: Once the folder opens, the file path to your theme files are: 
home/local sites/gtcoding>app>public>wp-content>themes>GTCoding

Incidentally, the complete filepath to your site files in this instance is home>local sites>gtcoding>app>public>wp-content>themes>. 
So each site you create requires its own individual wordpress environment including the default themes provided. 




Add your files to your theme
Here you will be adding style.css, index.php, header.php footer.php and a thumbnail
Create a folder in the Themes folder and name it GTCoding
(You can see the new theme in WP Admin>Appearance>Themes  It will currently be visible under 'Broken Themes')

NB: The code for the files below are in github>php_wp>boilerplate

Create a css file:
Create a new file called style.css (I did this from the terminal window)
Type the following in the css file (within comments). 
/**
Theme: GTCoding
Author: Maurizio Marrocco
Author URI:
Description:The official theme for GTCoding
Version: 1
**/
The above details will be displayed when you click on 'Appearance>Themes>Theme Details'.

Create an index.php file:
Create a new file called index.php (I did this from the terminal window)
(Write some html in the index.php file and activate it in 'Appearance>Themes' to test it works)

Create a thumbnail:
Thumbnail (The image that is displayed on your theme in the Admin area).
Save a thumbnail image of your choice, Name your image screenshot.png (Must be named in this way) and place it in your theme folder that contains your style.css and index.php files.
This image will now appear in your theme thumbnail

Add header and footer files:
Create a file called header.php and footer.php inside your GTCoding theme folder. (Examples of these are in github>php_wp>boilerplate.
Ad some html to both these files for later testing.





Importing header and footer files
Importing the header and footer files into our index.php file
Add this script to the index.php
####################
<?php get_header();?>
<h1>Hi from index.php</h1>
<?php get_footer();?>
#####################



2.12 in
https://www.youtube.com/watch?v=KibbYf9avko&t=43s 




Address of new site: 
Site ://<site name>.local/
Admin: http://<site name>.local/wp-admin/



Link our css and javascript files to our theme
This is achieved through creating a file called functions.php. Then use of a wordpress hook called wp_enqueue_script or wp_enqueue_style within this file.
Firstly create the file called functions.php  (This is a very usefull file we can do interesting things with in addition to adding our css and js files to our theme, such as adding a new categories to our posts and add new features to our theme and filters etc.)

See boilerplate for explanations to the required code below.
wp_enqueue_style('style', get_stylesheet_uri(), NULL,  microtime(), 'all');
wp_enqueue_script("main", get_theme_file_uri('js/main.js'),  NULL,  microtime(),  true);



stopped here 2.16 in



Link google fonts and font awsome to our webiste
We now need to link google fonts and font awsome to our webiste.
2.20 in
Before continuing at 2.20, refer to the 3.5_Adding_font_awsome file for more information in integrating font awesome into your wp site.

function gr_setup(){
	//Below is for google fonts
	wp_enqueue_style('google_fonts', '//fonts.googleapis.com/css2?family=Roboto+Condensed:ital,wght@1,300&family=Roboto+Slab:wght@300&family=Roboto:wght@300&display=swap"');
	
	//Below is for font-awesome
	wp_enqueue_style('font_awsome' , '//netdna.bootstrapcdn.com/font-awesome/3.2.1/css/font-awesome.css"');
	
	//Below is to link your stylesheet
	wp_enqueue_style('style', get_stylesheet_uri(), NULL,  microtime(), 'all');
	//parameter inputes:
	//(Name of css file,    file destination, No dependencies in our css file,  Auto updates file after changes, device types supported)
	
	//Below is to link your javascript file	
	wp_enqueue_script("main", get_theme_file_uri('js/main.js'),  NULL,  microtime(),  true);
	//parameter inputes:
	//(filename $handle,  file destination get_theme_file_uri(js/main.js) $src,  dependencies $deps,  version[Auto updates after changes] $ver,  Whether placed in footer] $in_footer))
}

//Below refers to the function above named 'gr_setup'
//Parameter 1 = when the function should be executed
//parameter 2 = The name of the function
add_action('wp_enqueue_scripts', 'gr_setup');







Hooks for Header and footer files
We now need to add code to the header and footer files.

<?php wp_head();  ?> //A wordpress hook that needs to go within he header tags of the header.php file
<?php wp_footer();  ?> //A wordpress hook that needs to go before the body closing tag of the footer.php file




Adding a list of posts to your index.php page  
This uses a while loop. The condition is that 'while posts exist...'
This is a page (index.php) that shows a list of posts available to click through to. IE, A list of posts you can choose from.
The items involved here are:
have posts, the post, the title, the excerpt and permalink. 
The code for this can be found in git/php_wp/post_list as well as below.
//The below code sits (usually) between the header and footer hooks on the page you wish to display your list of posts.

<?php  
	while(have_posts()) {  //The condition of the while loop is that posts exist.
			the_post(); 
   <a href="<?php the_permalink(); ?>" >
		<h3><?php the_title(); //The h3 tags include embeded php code to output the post's titles?> </h3> </a>
		<?php the_excerpt(); // The excerpt displays a short excerpt of the post.?>  	
		<?php  //Amazingly, you need to open and close the php to accomodate the last curly brace to end the function.		
			    }
?>





Adding theme support to posts
This adds functionality to the default 'posts' to include: post thumbnails, title tag, and html5 ,
the post thumbnails functionality adds and option in admin to upload a desired image as your post's thumbnail.
It goes into the functions.php file.
function gr_init() {
		add_theme_support('post-thumbnails');
		add_theme_support('title-tag');
		add_theme_support('html5',  array('comment-list' , 'comment-form' , 'search-form')); 
						}
add_action('after_setup_theme', 'gr_init');








Custom Post Type 
Here you are creating your own custome post type. 'post' is the default already available in the wp admin area. This custom post type (that you named 'Project') will be added somewhere below it (on the admin page left menu).
This code is also available in custom_post_type.c
//register_post_type creates a new menu item in admin and allows you to create multiple projects as required. 
//slug is the part of your URL that you can edit when writing or editing a post
//Lables (Names) for each following item.
//name = Name of the item on the admin menu
//menu icon : add an icon for our post type (found at developer.wordpress.org  put dashicons into the searchbar to search through the different icons.
	//'public' Make this custom post type public. This can be kept private ie if it is only for admin.
	//'has_archive' Allows you to filter by date, author, categories etc
	// 'supports' What should be supported by this custom post type. (Items it will enable). Thumbnails are included here and it is important to note that 'post thumbnails' need to be set globally (above) in order for thumbnails to be enabled in this custom post type, even though you have  'supports'  => arrray (...'thumbnail'... ) below. (Ie: you still needd to set it globally for it to work).
	
So in your case, you created a custom post type named 'projects'. The code for how to list these are also in the post_list file. These require variables with arrays in the functions.php file.
The main items here are $args (a variable with and array), a second variable that takes the first variable as a WP_Query argument, a while loop, with have posts, post-of-choice (in my case, 'the post' or 'project') and posts per page. 

Finally, we have permalink, the title and the excerpt

	SO HERE IS THE CODE for the functions.php file.
function gr_custom_post_type(){
	register_post_type('project', 
			    array('rewrite' => array('slug' => 'projects'),
			   'labels' => array('name' => 'Projects' , 'singular_name' => 'Project' , 
			   'add_new_item' => 'Add New Project' ,
			   'edit_item' => 'Edit Project'
			          	     ) ,
			   'menu-icon' => 'dashicons-clipboard' ,
			   'public' => true, 'has_archive' => true, 
			   'supports' => array('title' , 'thumbnail' , 'editor' , 'excerpt' , 'comments')
			  )			  
			   );
			      }//function end
add_action('init' , 'gr_custom_post_type'); //final step is to add an action to run this function
?>
//In addition to the code above, you also need to add code to the page you want to display your custom post list.
//The code for this is below after 



	




Wordpress Template Hierarchy ,
There are pre-determined templates that can serve up your content depending on how you want your layouts to look for certain pages. 

Wordpress will search for specifically named files within the files you create. If you don't have these SN files then wordpress will simply serve up your content with the default index.php

singular.php is the next template up from the default index.php. This will 'catch' a single page you create: (pages > add new) and also a single post (post > add new) [both from the admin dashboard left menu]

The next step-up is a)single.php for posts and b)page.php for pages. 
This is useful if you want to differentiate between the look of a single post and a single page.

The next step-up could be the use of a 'slug' (after the last forward slash in the url).
In the case of a page, the 'About' can be specifically identified and given its own template by using a slug. [In the case of the 'About' page, the slug is the 'about' string at the end of the url in your 'grange' website].

So to find the slug, go to the page in your admin and hover > view > to reveal the page and its slug (as I said previously) at the end of the url.

Blue laptop's desktop has a wordpress hierarchy image that you can use as a guide.

Other References
https://www.usablewp.com/learn-wordpress/building-the-blog/building-a-single-post-page/
Quote from: easywp.com/blog/wordpress-template-hierarchy-explained
Intro: The hierarchy is a system to determine which template file is required to display a selected web page on your site. The files served up are based on the type of page to be displayed. In wordpress, web pages can be displayed as a 'page', 'post', 'catergory page', 'search page'. 
A web page will also pull up several different template files when it loads. EG: if a web page needs to have a sidebar, then the sidebar.php template file will load. These 'Template Partials' are 'header', 'footer', 'sidebar'.

So if you now add a page via the wp admin, it should be served up by page.php (if you created a file with this name). Test this now!








Adding a single post page
If you click on any blog post from the blog post's index page, WordPress will take you to a page where you can read the entire blog post.
This page is served up by either single.php, singular.php or index.php files.  The default is the latter, then it moves to singular.php if no single.php file exists. Finally, if you have created a single.php file, then this is the file that serves it up. 

The code to display the page requires a loop.

Items here are: have posts, the post, the title, the author, get the post thumbnail, the content and the comment form. 

Please bear in mind you need to upload a featured image via admin for the post thumb nail to display. Just click on the post and upload a featured image. Remember to 'Update' your post so the FI is properly added. 

The code for this single post page is in git/php_wp/single_post.c
AND HERE;
<?php
	while(have_posts()) {  //NB have_posts require comments
		
		the_post();
?>
		<h2> <?php the_title();?> </h2>
		
		Posted by <?php the_author(); ?>
		
		<img src= "<?php echo get_the_post_thumbnail_url(get_the_ID()); ?>" />
		
		<?php the_content(); 
		      'the_comment_form()'; 

		 } 	?>






Adding a front page and a Blog page
The site front page is very high up in the hierarchy so by creating a front-page.php, the site ,by default, will open in this page. Similar to the index.html in a static site.

Go to Admin > pages > add new.  Call the title 'Home'.  Click 'publish'  
Now go to Dashboard > settings > reading settings. 
'Your homepage displays': Choose Static Page
Home page drop-down: select 'Home'. 
Now Save your settings
Now this new page (as per the heirarchy) will look for a file called  front-page.php

So 'site front page' named in the heirarchy image is the same as 'Home Page' in the Admin > Pages.
It's as if 'site front page' looks to serve up code/data found in front-page.php file. 
3.02 in
stopped here
Now create a blog page
Admin > pages > add new.  Give the title as 'Blog' then Publish it
Again, go back to Dashboard > settings > reading settings.
Save your settings again.



So now we are working through the process of 'transferring' the static gtcoding site we created earlier on in the video course to this wordpress website we are creating. So as above, first step is to add a front page via admin. 

#####
As a side not:
The static site is located at: blue laptop > desktop > projects > wordpress > my wordpress site
The wordpress website files are located at: home > local sites > grange > app > public > content > theme > grange
#####

So firstly we need to add the  new page within admin, calling in 'Home'. Whilst you're at it, create another page called 'blog'. Just delete any sample pages you previously created (just to keep things neat and tidy)
Now (from the admin dashboard) go to setting > reading. Change 'Your home page displays' drop down options to 'static page' and select 'Home' for the 'Home page' drop down option. Also select 'blog' for the 'post page' drop down option.

front-page.php
Create a file in your website route (where you also have index.php, header, footer etc) and name it front-page.php. The Wordpress site hierarchy will default to this page when someone visits your site. Test that it works.






Bring in you css, html and images (From a static site)
Paste all your css code from your static version of the site into the wp route folder's css file.
Paste all your index.html code over to the newly created front-page.php
Copy all your images over to a folder named img. (You may need to create this folder if not already done so)






Updating header.php and footer.php files
You are now beginning to move the relevant code over to the header and footer files you already created.
So, move all the header code from the recently pasted code in front-pag.php, to the header.php file. In my case, this is all the code above the 'banner' tag.
Do the same with the footer code by moving it from front-page.php to the footer.php file.






Header and footer hooks
Add this code to the closing body tag in footer.php 
<?php wp_footer(); ?> 
This identifies the code as footer code.

This code: <?php wp_head(); ?> to be placed in header.php, replaces all the 'link' tags [originaly in the index.html static site], related to css, font awsome, google fonts and js (which can now be grabbed from your functions.php file).
This function acts as a hook to bring in (amongst other things) enqeue styles and scripts for linking css and javascript files.





Importing header.php and footer.php files to front-page.php
Refer to your pencilled code map for a better visual. Below is the code

Add this to the top and bottom (respectively) of your front-page.php  file
<?php get_header(); ?>
<?php get_footer(); ?>




Menu links to replace static menu links
                <a class="active" href="<?php echo site_url('') ;?>">Home</a>
                <a href="<?php echo site_url('/blog') ;?>">Blog</a>
                <a href="<?php echo site_url('/projects') ;?>">Projects</a>
                <a href="<?php echo site_url('/about') ;?>">About</a>
		
Image Links to replace static image links
		//This code is more speific to images
		//Adding a logo to the header.php file
		<img src="<?php echo get_template_directory_uri(); ?>/img/logo.png" alt="grange">
		//The first part   get_template_directory_uri();   goes to the route folder of your wordpress site. 


		<img src="<?php echo get_the_post_thumbnail_url('get_the_ID'); ?>" 
		//Gets your thumbnail image




Display post list on front page
Now that you have important code from the static site to you wp site, you can now display your custom post list/index on your front-page.php.
In your example, it sits within the 'section' ID
Items for the image are: the_permalink, get_the_post_thumbnail_url
Items for description are: the_permalink, the_title, trim_words(get_the_excerpt)

AND HERE IS THE CODE FOR THE POST LIST PAGE (Ie the index.php, front-page.php or any other page you wish your post list to be on.
 <?php  
 //$args: An associative array variable that points to the 'project' post type you created before
  $args = array( 'post_type'  => 'project', //Declares which post to display, 'post' or (my one)'project'
	 'posts_per_page' => 2 //How many posts per page should be displayed
 );
 $blogposts = new WP_Query($args);//This variable ($blogposts) uses the above variable ($args) as an argument.
	while($blogposts -> have_posts()) {  //The condition of the while loop is that posts exist.
	      $blogposts -> the_post(); //Display the post if true
   }
?>
            <div class="card">
                <div class="card-image">
		    //This creates a link around the thumbnail
                    <a href="<?php the_permalink(); ?>" >
		    	//This grabs the thumbnail for each post
                        <img src="<?php echo get_the_post_thumbnail_url('get_the_ID'); ?>"
                    </a>
                </div>
                <div class="card-description">
		    //THis creats a link around the title
                    <a href="<?php the_permalink() ?> ">
		    			//This grabs the title for each post
					<h3> <?php the_title(); ?> </h3>
						</a>
						//**This 'trims' the number of exerpts to (in this case) 30 words.
						<p> <?php echo wp_trim_words(get_the_excerpt(), 30); ?> </p>
                    <a href="blogpost.html" class="btn-readmore">
                        Read More
                    </a>
                </div>
            </div>
//** Your post type must have 'excerpt' supported for this to work: ie  'supports' => array(... , 'excerpt' , ...)


